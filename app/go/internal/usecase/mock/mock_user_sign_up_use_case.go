// Code generated by MockGen. DO NOT EDIT.
// Source: user_sign_up_use_case.go
//
// Generated by this command:
//
//	mockgen -source=user_sign_up_use_case.go -destination=./mock/mock_user_sign_up_use_case.go -package=usecase
//

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	usecase "mickamy.com/playground/internal/usecase"
)

// MockUserSignUp is a mock of UserSignUp interface.
type MockUserSignUp struct {
	ctrl     *gomock.Controller
	recorder *MockUserSignUpMockRecorder
}

// MockUserSignUpMockRecorder is the mock recorder for MockUserSignUp.
type MockUserSignUpMockRecorder struct {
	mock *MockUserSignUp
}

// NewMockUserSignUp creates a new mock instance.
func NewMockUserSignUp(ctrl *gomock.Controller) *MockUserSignUp {
	mock := &MockUserSignUp{ctrl: ctrl}
	mock.recorder = &MockUserSignUpMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSignUp) EXPECT() *MockUserSignUpMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockUserSignUp) Do(ctx context.Context, input usecase.UserSignUpInput) (usecase.UserSignUpOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, input)
	ret0, _ := ret[0].(usecase.UserSignUpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockUserSignUpMockRecorder) Do(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockUserSignUp)(nil).Do), ctx, input)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: user_avatar_repository.go
//
// Generated by this command:
//
//	mockgen -source=user_avatar_repository.go -destination=./mock/mock_user_avatar_repository.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
	model "mickamy.com/playground/internal/model"
	repository "mickamy.com/playground/internal/repository"
)

// MockUserAvatar is a mock of UserAvatar interface.
type MockUserAvatar struct {
	ctrl     *gomock.Controller
	recorder *MockUserAvatarMockRecorder
}

// MockUserAvatarMockRecorder is the mock recorder for MockUserAvatar.
type MockUserAvatarMockRecorder struct {
	mock *MockUserAvatar
}

// NewMockUserAvatar creates a new mock instance.
func NewMockUserAvatar(ctrl *gomock.Controller) *MockUserAvatar {
	mock := &MockUserAvatar{ctrl: ctrl}
	mock.recorder = &MockUserAvatarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAvatar) EXPECT() *MockUserAvatarMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockUserAvatar) Create(ctx context.Context, m *model.UserAvatar) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserAvatarMockRecorder) Create(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserAvatar)(nil).Create), ctx, m)
}

// WithTx mocks base method.
func (m *MockUserAvatar) WithTx(tx *gorm.DB) repository.UserAvatar {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(repository.UserAvatar)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockUserAvatarMockRecorder) WithTx(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockUserAvatar)(nil).WithTx), tx)
}

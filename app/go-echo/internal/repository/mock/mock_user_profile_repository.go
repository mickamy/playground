// Code generated by MockGen. DO NOT EDIT.
// Source: user_profile_repository.go
//
// Generated by this command:
//
//	mockgen -source=user_profile_repository.go -destination=./mock/mock_user_profile_repository.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
	model "mickamy.com/playground/internal/model"
	repository "mickamy.com/playground/internal/repository"
)

// MockUserProfile is a mock of UserProfile interface.
type MockUserProfile struct {
	ctrl     *gomock.Controller
	recorder *MockUserProfileMockRecorder
}

// MockUserProfileMockRecorder is the mock recorder for MockUserProfile.
type MockUserProfileMockRecorder struct {
	mock *MockUserProfile
}

// NewMockUserProfile creates a new mock instance.
func NewMockUserProfile(ctrl *gomock.Controller) *MockUserProfile {
	mock := &MockUserProfile{ctrl: ctrl}
	mock.recorder = &MockUserProfileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserProfile) EXPECT() *MockUserProfileMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockUserProfile) Create(ctx context.Context, m *model.UserProfile) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserProfileMockRecorder) Create(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserProfile)(nil).Create), ctx, m)
}

// Get mocks base method.
func (m *MockUserProfile) Get(ctx context.Context, id string, scopes ...repository.Scope) (model.UserProfile, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range scopes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(model.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserProfileMockRecorder) Get(ctx, id any, scopes ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, scopes...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserProfile)(nil).Get), varargs...)
}

// GetBySlug mocks base method.
func (m *MockUserProfile) GetBySlug(ctx context.Context, slug string, scopes ...repository.Scope) (model.UserProfile, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, slug}
	for _, a := range scopes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBySlug", varargs...)
	ret0, _ := ret[0].(model.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySlug indicates an expected call of GetBySlug.
func (mr *MockUserProfileMockRecorder) GetBySlug(ctx, slug any, scopes ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, slug}, scopes...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySlug", reflect.TypeOf((*MockUserProfile)(nil).GetBySlug), varargs...)
}

// WithTx mocks base method.
func (m *MockUserProfile) WithTx(tx *gorm.DB) repository.UserProfile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(repository.UserProfile)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockUserProfileMockRecorder) WithTx(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockUserProfile)(nil).WithTx), tx)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: oauth.go
//
// Generated by this command:
//
//	mockgen -source=oauth.go -destination=./mock/mock_oauth.go -package=oauth
//

// Package oauth is a generated GoMock package.
package oauth

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	oauth "mickamy.com/playground/internal/lib/oauth"
)

// MockOAuth is a mock of OAuth interface.
type MockOAuth struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthMockRecorder
}

// MockOAuthMockRecorder is the mock recorder for MockOAuth.
type MockOAuthMockRecorder struct {
	mock *MockOAuth
}

// NewMockOAuth creates a new mock instance.
func NewMockOAuth(ctrl *gomock.Controller) *MockOAuth {
	mock := &MockOAuth{ctrl: ctrl}
	mock.recorder = &MockOAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuth) EXPECT() *MockOAuthMockRecorder {
	return m.recorder
}

// ValidateToken mocks base method.
func (m *MockOAuth) ValidateToken(ctx context.Context, provider, tokenStr string) (oauth.TokenPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", ctx, provider, tokenStr)
	ret0, _ := ret[0].(oauth.TokenPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockOAuthMockRecorder) ValidateToken(ctx, provider, tokenStr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockOAuth)(nil).ValidateToken), ctx, provider, tokenStr)
}

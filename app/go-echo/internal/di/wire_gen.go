// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"mickamy.com/playground/config"
	"mickamy.com/playground/internal/api/controller"
	"mickamy.com/playground/internal/infra/store/database"
	"mickamy.com/playground/internal/lib/oauth"
	"mickamy.com/playground/internal/repository"
	"mickamy.com/playground/internal/usecase"
)

// Injectors from wire.go:

func InitializeConfigs() Configs {
	diConfigs := NewConfigs()
	return diConfigs
}

func InitializeLibs() Libs {
	oAuth := oauth.New()
	diLibs := Libs{
		OAuth: oAuth,
	}
	return diLibs
}

func InitializeInfra() Infras {
	dbConfig := config.DB()
	db := database.DB(dbConfig)
	diInfras := Infras{
		DB: db,
	}
	return diInfras
}

func InitializeRepositories() Repositories {
	dbConfig := config.DB()
	db := database.DB(dbConfig)
	user := repository.NewUser(db)
	userAccount := repository.NewUserAccount(db)
	userAvatar := repository.NewUserAvatar(db)
	userProfile := repository.NewUserProfile(db)
	diRepositories := Repositories{
		User:        user,
		UserAccount: userAccount,
		UserAvatar:  userAvatar,
		UserProfile: userProfile,
	}
	return diRepositories
}

func InitializeUseCases() UseCases {
	dbConfig := config.DB()
	db := database.DB(dbConfig)
	oAuth := oauth.New()
	user := repository.NewUser(db)
	userAccount := repository.NewUserAccount(db)
	userProfile := repository.NewUserProfile(db)
	userAvatar := repository.NewUserAvatar(db)
	userSignUp := usecase.NewUserSignUp(db, oAuth, user, userAccount, userProfile, userAvatar)
	diUseCases := UseCases{
		UserSignUp: userSignUp,
	}
	return diUseCases
}

func InitializeControllers() Controllers {
	dbConfig := config.DB()
	db := database.DB(dbConfig)
	oAuth := oauth.New()
	user := repository.NewUser(db)
	userAccount := repository.NewUserAccount(db)
	userProfile := repository.NewUserProfile(db)
	userAvatar := repository.NewUserAvatar(db)
	userSignUp := usecase.NewUserSignUp(db, oAuth, user, userAccount, userProfile, userAvatar)
	controllerUser := controller.NewUser(userSignUp)
	diControllers := Controllers{
		User: controllerUser,
	}
	return diControllers
}
